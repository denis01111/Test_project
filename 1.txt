Hello world


27.06.2022
Good Bye!

# ***Введение в контроль версий***
 
***Для осуществления работы с контролем версий используют программу git, с помощью которой реализуется***
 
* Возможность хранить различные версии проекта
 
* Возможность возвращаться к различным версиям проекта
 
>Контроль версий это процес сохранения версий проекта, при этом можно при необходимости вернуться к любой предыдущей версии (самый простой пример это сохраненние в играх).
___
 
*Вопросы связанные с контролем версий берет на себя* **git**
 
## Принцип работы **git**
 
_заключается в том, что имеется один первоначальный проект, в последствии при создании изменени вданном проекте и создании новой версии, пересохраняется не весь проект, а только изменения, тоесть имеется первоначальная версия проекта и отдельно сохраняются изменения (вторая версия), в дальнейшем при создании третий, четвертой и т.д. версий, будут сохранятся каждый раз изменения, в случае необходимости можно будет вернуться к любой версии проекта_
>Старый способ подрузумевал сохранения каждой версии проекта полностью.
 
* данный подход позволяет экономить место, отслеживать изменения, возвращаться к любой версии проекта.
 
![git команды](/Gid_program/git_com.jpg)
 
***Команды git***
==
 
|Команда|Описание
| ------| ------|
|git init|Создание локального образа репозитория|
|git add имя фаила| добавление фаила в репазиторий|
|git status | Отображает измененные фаилы|
|git diff| Показывает разницу между тикущей и предыдущей версией|
|git log| показывает журнал действий (commit)|
|git commit -m 'название комита'| команда создания commit|
|git checkout имя комита| переключение между комитами|
|clear| очистить терминал|
|git branch| показывает ветки и место положение, в какой ветке находитесь|
|git branch имя ветки| Создание новой ветки|
|git checkout название ветки| позволяет переходить между ветками|
|git branch -d название ветки| удаление ветки|
|git merge азвание ветки| присоеденяет указанную ыетку к той в которой находитесь в данный момент|
|git log --graph| выводит и выделяет историю спомощью графа/дерева|
 
 
 
 
***Инструкция для работы с Markdown***
===
***Заголовки:***
===
 
# Заголовок 1 #
## Заголовок 2 ##
### Заголовок 3 ###
#### Заголовок 4 ####
##### Заголовок 5 ######
###### Заголовок 6 ######
Заголовок 1 v2
====
Заголовк 2 v2
------
 
 
***Выделение текста:***
===
 
__ЖИРНЫЙ__
 
**ЖИРНЫЙ V.2**
 
*Курсив*
 
_Курсив V.2_
 
~~Зачеркнутый~~
 
*Так же можно __сочетать__ два типа выделения текста __объеденив их в одно общее для работы с текстом__*
 
***Списки и отступы***
===
 
*Не нумерованный*
 
- Пункт 1
- Пункт 2
- пункт 3
 
+ Пункт 2.1
+ Пункт 2.2
+ Пункт 2.3
 
* Пункт 3.1
* Пункт 3.2
* Пункт 3.3
 
*Нумерованный*
 
1. Пункт 1.1
2. Пункт 1.2
3. Пункт 1.3
 
1. Пункт 2.1
1. Пункт 2.2
1. Пункт 2.3
 
9. Пункт 3.1
7. Пункт 3.2
3. Пункт 3.3
 
*Многоуровневый список*
 
- Пункт 1
   - подпункт 1.2
       + Подпункт 1.3
 
1. Пункт 2
   + Подпункт 2.1
       - Подпункт 2.3
 
2. Пункт 3
   1. Подпункт 3.1
       1. Подпункт 3.1.1
 
***Сылки**
 
[ссылка c тфйтлом](https://gb.ru/ "GeekBrains")
 
[ссылка без заголовка](https://gb.ru/)
 
<https://gb.ru/> без анкорная ссылка
 
***Добавление картинок***
===
 
![Hello World](/Hello%20World.jpg)
 
![Hello World](/Hello%20World.jpg "Hello")