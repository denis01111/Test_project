Hello world
# Инструкция по работе с языком Markdown.

1. ## Заголовки

Система поддерживает 6 уровней заголовка:
# 1 уровень
## 2 уровень 
### 3 уровень
#### 4 уровень
##### 5 уровень
###### 6 уровень
Для выделения заголовка используется #.

2. ## Выделение текста:

    **Полужирный стиль** - текст выделен ** или __ с обеих сторон.
  
    *Курсив* - текст выделен * или _ с обеих сторон.

    Чтобы задать для текста ***полужирное и курсивное*** написание, заключите его в тройные звездочки:
 
    ~~Зачеркнутый текст~~ - текст выделен ~~ с обеих сторон.

3. ## Типы оповещений

[!!!NOTE]
Information the user should notice even if skimming.

[!!!TIP] 
Optional information to help a user be more successful.

[!IMPORTANT]
Essential information required for user success.

[!CAUTION]
Negative potential consequences of an action.

[!WARNING]
Dangerous certain consequences of an action.

4. ## Блок цитирования

> Иногда какой-то блок нужно выделить как цитату. Для выделения используется знак >.

5. ## Таблицы

Таблицы требуют заголовок и настройки выравнивания (второй строкой). Выравнивание задаётся двоеточием. Колонки задаются вертикальным палками (|)

Внешние вертикальные палки (|) задавать необязательно, также не требуется подгонять колонки под один размер. 

Студент | Возраст | Город | Курс |
--- | --- | :---: |:---:
*Иванов* | `25` | **Омск**| ***Разработчик***
*Сидоров* | `36` | **Нижневартовск** | ***Аналитик***

Номер | Картинка
--- | ---
1 | ![Гик брейнс](1.png)
2 | ![Маркдаун](2.png)

6. ## Работа с изображениями

Самый простой формат иллюстраций:

`! [Альтернативный текст] (Ссылка на изображение "необязательный заголовок")`

Местное изображение:

![Вот котик (наведите указатель):](Котик.jpg "Я учусь")
 
Сетевое изображение:

![Вот котик (наведите указатель)](https://cs12.pikabu.ru/post_img/big/2021/07/09/5/162581354815237509.jpg "Все ты можешь!")

7. ## Ссылки
[Обычная ссылка в строке](https://docs.microsoft.com/ru-ru/contribute/how-to-write-links)

[Обычная ссылка с title](https://gb.ru/posts/soveti-pro-git "Советы для тех, кто осваивает Git")

[Ссылка со сноской][Произвольный регистронезависимый текст]

[Относительная ссылка на документ](../blob/master/LICENSE)

[Для ссылок со сноской можно использовать цифры][1]

Или можно просто вставить ссылку в квадратные скобки [текст ссылки]


[произвольный регистронезависимый текст]: https://docs.microsoft.com/ru-ru/contribute/how-to-write-links
[1]: https://learngitbranching.js.org
[текст ссылки]: http://www.reddit.com

8. ## Код и подцветка синтаксиса
`Код` в строке обрамляется `обратными апострофами`.

Блоки кода выделяются либо тремя обратными апострофами ``` либо четырьмя пробелами в каждой строке. Рекомендуется использовать три апострофа -- они проще и только они поддерживают подсветку синтаксиса.
```python
s = "Подсветка Python"
print s
```
```javascript
var s = "Подсветка JavaScript";
alert(s);
```
9. ## Нумерованные и маркированные списки
Markdown позволяет создавать списки с любым уровнем вложенности.
Маркированные списки делаются с помощью тире "**-**" проставляемого перед каждым пунктом:
- Первый пункт
- Второй пункт
- Третий пункт 

Или вместо тире можно ставить звездочку "*":
* Первый пункт 
* Второй пункт
* Третий пункт

Нумерованные списки создаются также только с использованием цифр:
1. Первый пункт
2. Второй пункт
3. Третий пункт

Можно создавать смешанные списки разной вложенности:
1. Первый пункт
- Первый подпункт
- Второй подпункт
- Третий подпункт
2. Второй пункт 
* Первый подпункт
* Второй подпункт
* Третий подпункт

# Инструкция по работе с репозиториями.
## Команды Git

 - **git clone** копирует внешний репозиторий на свой ПК.
Команда **git clone** составная: она не только загружает все изменения, но и пытается слить все ветки на локальном компьютере и в удаленном репозитории.
- **git pull** позволяет скачать все из текущего репозитория и автоматически сделать merge с нашей версией.
- **git push** позволяет отправить нашу версию репозитория на внешний репозиторий. ТРЕБУЕТ АВТОРИЗАЦИИ на внешнем репозитории.

## Как настроить совместную работу
1. Создать аккаунт на Github.com
2. Создать локальный репозиторий. *(В папке на рабочем столе)* 
3. "Подружить" локальный и удаленный репозитории.  *Github  при создании нового репозитория подскажет как это сделать)*
4. Отправить (push) локальный репозиторий в удаленный Github 
5. Провести изменения с "другого компьютера"
6. Выкачать (pull) актуальное состояние из другого репозитория

## Как сделать pull request
Делаем   (ответвление) репозитория fork

Делаем git clone   версии репозитория СВОЕЙ

Создаем новую ветку и в НЕЕ вносим свои изменения

Фиксируем изменения (делаем коммиты)

Отправляем свою версию в свой GitHub

На сайте GitHub нажимаем кнопку pull request


27.06.2022
Good Bye!
